# Project by: Aleksandra WÃ³jcik 268488

## Compiler Project Description:

To compile the project, enter the following command in the terminal:
make


## Tools:
- bison (GNU Bison) 3.8.2
- flex 2.6.4
- GNU Make 4.3
- g++ 11.4.0

## Project Structure Description:

The main program file, which integrates all other parts, is `main.cpp`.
Other files are divided into two categories:

### Back:
Files in this directory are responsible for generating machine code and managing memory.
- `CodeGenerator.hpp`: Key component of the compiler, responsible for transforming information from the AST into virtual machine code. It contains functions that generate specific instructions, handling arithmetic, logical operations, assignments, conditions, loops, etc.
- `Memory.hpp`: Responsible for efficient memory management during code generation. Its key task is also to track available memory locations.
- `AsmInstruction.hpp`: Responsible for generating instructions understandable by the virtual machine.

### Front:
Files responsible for lexical, syntax, and semantic analysis.
- `lexer.l`: The main task of this file is to analyze characters in the source code and assign appropriate lexemes (tokens) to them.
- `parser.y`: The parser checks whether the sequence of tokens complies with the grammar rules. In case of syntax errors, the parser generates appropriate error messages.
- `ast.hpp`: Contains the implementation of the data structure representing the abstract syntax tree.
- `SemanticAnalyzer.hpp`: Focuses mainly on semantic analysis of the source code. Its task is to detect semantic errors and inconsistencies that are not related to syntax errors but concern the correctness of the program's meaning.
